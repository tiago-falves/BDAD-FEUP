--
-- File generated with SQLiteStudio v3.2.1 on dom abr 14 13:51:38 2019
--
-- Text encoding used: System
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: Address
DROP TABLE IF EXISTS Address;
CREATE TABLE Address (addressId INTEGER PRIMARY KEY NOT NULL ON CONFLICT ABORT, streetName TEXT NOT NULL ON CONFLICT ABORT, doorNumber INTEGER NOT NULL ON CONFLICT ABORT);

-- Table: BankTransfer
DROP TABLE IF EXISTS BankTransfer;
CREATE TABLE BankTransfer ("PID " INTEGER PRIMARY KEY ON CONFLICT ABORT REFERENCES PaymentMethod (PID) ON DELETE SET NULL ON UPDATE CASCADE, accountNumber INTEGER NOT NULL ON CONFLICT ABORT);

-- Table: Cash
DROP TABLE IF EXISTS Cash;
CREATE TABLE Cash (Pid INTEGER REFERENCES PaymentMethod (PID) ON DELETE SET NULL ON UPDATE CASCADE PRIMARY KEY ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT);

-- Table: listPassenger
DROP TABLE IF EXISTS listPassenger;
CREATE TABLE listPassenger (lId INTEGER PRIMARY KEY ON CONFLICT ABORT, address INTEGER REFERENCES Address (addressId) ON DELETE SET NULL ON UPDATE CASCADE);

-- Table: Maker
DROP TABLE IF EXISTS Maker;
CREATE TABLE Maker (name TEXT UNIQUE ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT PRIMARY KEY ON CONFLICT ABORT, countryOfOrigin TEXT NOT NULL ON CONFLICT ABORT);

-- Table: Map
DROP TABLE IF EXISTS Map;
CREATE TABLE Map (mapID INTEGER PRIMARY KEY ON CONFLICT ABORT UNIQUE ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT, path BLOB NOT NULL ON CONFLICT ABORT);

-- Table: Message
DROP TABLE IF EXISTS Message;
CREATE TABLE Message (messageId INTEGER PRIMARY KEY ON CONFLICT ABORT UNIQUE ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT, date DATE NOT NULL ON CONFLICT ABORT, text TEXT, sender INTEGER REFERENCES User (uID) ON DELETE SET NULL ON UPDATE CASCADE, receiver INTEGER REFERENCES User (uID) ON DELETE SET NULL ON UPDATE CASCADE, CHECK (sender <> receiver));

-- Table: Model
DROP TABLE IF EXISTS Model;
CREATE TABLE Model (name TEXT NOT NULL ON CONFLICT ABORT PRIMARY KEY, maxCapacity INTEGER CHECK (maxCapacity <> 0) NOT NULL ON CONFLICT ABORT, avgConsumption REAL CHECK (avgConsumption > 0.0) DEFAULT ((6.0)), maker TEXT REFERENCES Maker (name) ON DELETE SET NULL ON UPDATE CASCADE NOT NULL ON CONFLICT ABORT);

-- Table: passenger
DROP TABLE IF EXISTS passenger;
CREATE TABLE passenger (user INTEGER REFERENCES User (uID) ON DELETE SET NULL ON UPDATE CASCADE,
trip INTEGER REFERENCES Trip (TID) ON DELETE SET NULL ON UPDATE CASCADE NOT NULL ON CONFLICT ABORT,
paymentmethod INTEGER REFERENCES PaymentMethod (PID) ON DELETE SET NULL ON UPDATE CASCADE DEFAULT (NULL),
PRIMARY KEY (user , trip)
);

-- Table: PaymentMethod
DROP TABLE IF EXISTS PaymentMethod;
CREATE TABLE PaymentMethod (PID INTEGER PRIMARY KEY ON CONFLICT ABORT AUTOINCREMENT UNIQUE ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT);

-- Table: Punctual
DROP TABLE IF EXISTS Punctual;
CREATE TABLE Punctual (TID INTEGER PRIMARY KEY REFERENCES Trip (TID) ON DELETE CASCADE ON UPDATE CASCADE UNIQUE ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT, date INTEGER NOT NULL ON CONFLICT ABORT);

-- Table: Regular
DROP TABLE IF EXISTS Regular;
CREATE TABLE Regular (TID INTEGER PRIMARY KEY ON CONFLICT ABORT REFERENCES Trip (TID) ON DELETE CASCADE ON UPDATE CASCADE UNIQUE ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT, onHolidays INTEGER CHECK (onHolidays = 1 or onHolidays = 0) DEFAULT (1), weekday TEXT NOT NULL ON CONFLICT ABORT REFERENCES Weekday (name) ON DELETE SET NULL ON UPDATE CASCADE, numberTrips INTEGER NOT NULL ON CONFLICT ABORT);

-- Table: stop
DROP TABLE IF EXISTS stop;
CREATE TABLE stop (address INTEGER REFERENCES Address (addressId) ON UPDATE CASCADE NOT NULL ON CONFLICT ABORT, map INTEGER REFERENCES Map (mapID) ON DELETE SET NULL ON UPDATE CASCADE NOT NULL ON CONFLICT ABORT, listpassenger INTEGER REFERENCES listPassenger (lId) ON DELETE SET NULL ON UPDATE CASCADE NOT NULL ON CONFLICT ABORT, "order" INTEGER NOT NULL ON CONFLICT ABORT, PRIMARY KEY ( Map , "order") );

-- Table: Trip
DROP TABLE IF EXISTS Trip;
CREATE TABLE Trip (TID INTEGER PRIMARY KEY UNIQUE ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT, startTime INTEGER NOT NULL ON CONFLICT ABORT, endTime INTEGER NOT NULL ON CONFLICT ABORT, costPassenger REAL CONSTRAINT "costPassenger > 0" CHECK (costPassenger > 0.0) NOT NULL ON CONFLICT ABORT, mapID INTEGER REFERENCES Map (mapID) ON DELETE SET NULL ON UPDATE RESTRICT NOT NULL ON CONFLICT ABORT, plate TEXT REFERENCES Vehicle (plate) ON DELETE SET NULL ON UPDATE CASCADE, CONSTRAINT "start < end" CHECK (startTime <= endTime));

-- Table: User
DROP TABLE IF EXISTS User;
CREATE TABLE User (uID INTEGER PRIMARY KEY ASC ON CONFLICT ABORT, username TEXT UNIQUE ON CONFLICT ABORT NOT NULL, password TEXT NOT NULL ON CONFLICT ABORT, rating REAL DEFAULT (0.0), photo BLOB, email TEXT UNIQUE ON CONFLICT ABORT);

-- Table: Vehicle
DROP TABLE IF EXISTS Vehicle;
CREATE TABLE Vehicle (plate TEXT PRIMARY KEY ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT, colour TEXT DEFAULT NULL, driver INTEGER REFERENCES user (uID) ON DELETE SET NULL ON UPDATE CASCADE, model TEXT REFERENCES Model (name) ON DELETE SET NULL ON UPDATE CASCADE NOT NULL ON CONFLICT ABORT);

-- Table: Weekday
DROP TABLE IF EXISTS Weekday;
CREATE TABLE Weekday (name TEXT NOT NULL ON CONFLICT ABORT UNIQUE PRIMARY KEY ASC);

-- Table: Deleted users
DROP TABLE IF EXISTS DeletedUsers;
CREATE TABLE DeletedUsers (uID INTEGER PRIMARY KEY ASC ON CONFLICT ABORT, username TEXT UNIQUE ON CONFLICT ABORT NOT NULL, password TEXT NOT NULL ON CONFLICT ABORT, rating REAL DEFAULT (0.0), photo BLOB, email TEXT UNIQUE ON CONFLICT ABORT);

-- Table: Deleted passengers
DROP TABLE IF EXISTS DeletedPassengers;
CREATE TABLE DeletedPassengers (user INTEGER ASC,
trip INTEGER ASC,
paymentmethod INTEGER,
PRIMARY KEY (user , trip)
);

-- Table: Deleted vehicles
DROP TABLE IF EXISTS DeletedVehicles;
CREATE TABLE DeletedVehicles (plate TEXT PRIMARY KEY ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT, colour TEXT DEFAULT NULL, driver INTEGER, model TEXT REFERENCES Model (name) ON DELETE SET NULL ON UPDATE CASCADE NOT NULL ON CONFLICT ABORT);

-- Table: Deleted messages
DROP TABLE IF EXISTS DeletedMessages;
CREATE TABLE DeletedMessages (messageId INTEGER PRIMARY KEY ON CONFLICT ABORT UNIQUE ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT, date DATE NOT NULL ON CONFLICT ABORT, text TEXT, sender INTEGER, receiver INTEGER, CHECK (sender <> receiver));

-- Table: Deleted trip
DROP TABLE IF EXISTS DeletedTrips;
CREATE TABLE DeletedTrips (TID INTEGER PRIMARY KEY UNIQUE ON CONFLICT ABORT NOT NULL ON CONFLICT ABORT, startTime INTEGER NOT NULL ON CONFLICT ABORT, endTime INTEGER NOT NULL ON CONFLICT ABORT, costPassenger REAL CONSTRAINT "costPassenger > 0" CHECK (costPassenger > 0.0) NOT NULL ON CONFLICT ABORT, mapID INTEGER REFERENCES Map (mapID) ON DELETE SET NULL ON UPDATE RESTRICT NOT NULL ON CONFLICT ABORT, plate TEXT, CONSTRAINT "start < end" CHECK (startTime <= endTime));


COMMIT TRANSACTION;
PRAGMA foreign_keys = on;